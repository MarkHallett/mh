{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation of the Python package mh \u00a4 Purpose \u00a4 The mh package is a small package that can be used as a template for larger packages Install mh \u00a4 To download the package from pypi, and install into the python site-packages pip install mh To install from github from a version tag eg v0.0.33 pip install git+https://github.com/MarkHallett/mh@v0.0.33 Warning Use a virtual env before installing Use \u00a4 From the exposed interface provided you can run import mh print ( mh . __version__ ) # the version of the package print ( mh . EG_VAR2 ) # a variable from the package print ( mh . test_function ()) # a function from the package print ( mh . Mh () . run_mh ()) # run a function of an Mh object For more information use dir(mh) help(mh) the Code Reference tab, which also shows the details of the internal implementation","title":"Overview"},{"location":"#documentation-of-the-python-package-mh","text":"","title":"Documentation of the Python package mh"},{"location":"#purpose","text":"The mh package is a small package that can be used as a template for larger packages","title":"Purpose"},{"location":"#install-mh","text":"To download the package from pypi, and install into the python site-packages pip install mh To install from github from a version tag eg v0.0.33 pip install git+https://github.com/MarkHallett/mh@v0.0.33 Warning Use a virtual env before installing","title":"Install mh"},{"location":"#use","text":"From the exposed interface provided you can run import mh print ( mh . __version__ ) # the version of the package print ( mh . EG_VAR2 ) # a variable from the package print ( mh . test_function ()) # a function from the package print ( mh . Mh () . run_mh ()) # run a function of an Mh object For more information use dir(mh) help(mh) the Code Reference tab, which also shows the details of the internal implementation","title":"Use"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v0.1.0 - 2022-06-03 \u00a4 Compare with v0.0.32 Added \u00a4 Add unit tests ( 3c604b4 by MarkHallett). Add code_of_conduct ( 577c65d by MarkHallett). Add documentation ( 21a2730 by MarkHallett). Add mkdoc.yml ( 07463e8 by MarkHallett). v0.0.32 - 2022-05-13 \u00a4 Compare with push push - 2022-05-13 \u00a4 Compare with v0.0.30 v0.0.30 - 2022-05-13 \u00a4 Compare with v0.0.29 v0.0.29 - 2022-05-12 \u00a4 Compare with v0.0.24 Added \u00a4 Add comments to l2.py ( e253d26 by MarkHallett). Add document link ( 1aae6eb by MarkHallett). v0.0.24 - 2020-06-23 \u00a4 Compare with first commit Added \u00a4 Add manifest.in ( 155fc6e by MarkHallett). Add logging tests ( 095aadb by MarkHallett). Add functionality ( e7de569 by MarkHallett). Add test command to readme.md ( c59a742 by MarkHallett). Add tests ( 85b5991 by Mark Hallett). Add basic detail ( d769960 by MarkHallett).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#v010-2022-06-03","text":"Compare with v0.0.32","title":"v0.1.0 - 2022-06-03"},{"location":"changelog/#added","text":"Add unit tests ( 3c604b4 by MarkHallett). Add code_of_conduct ( 577c65d by MarkHallett). Add documentation ( 21a2730 by MarkHallett). Add mkdoc.yml ( 07463e8 by MarkHallett).","title":"Added"},{"location":"changelog/#v0032-2022-05-13","text":"Compare with push","title":"v0.0.32 - 2022-05-13"},{"location":"changelog/#push-2022-05-13","text":"Compare with v0.0.30","title":"push - 2022-05-13"},{"location":"changelog/#v0030-2022-05-13","text":"Compare with v0.0.29","title":"v0.0.30 - 2022-05-13"},{"location":"changelog/#v0029-2022-05-12","text":"Compare with v0.0.24","title":"v0.0.29 - 2022-05-12"},{"location":"changelog/#added_1","text":"Add comments to l2.py ( e253d26 by MarkHallett). Add document link ( 1aae6eb by MarkHallett).","title":"Added"},{"location":"changelog/#v0024-2020-06-23","text":"Compare with first commit","title":"v0.0.24 - 2020-06-23"},{"location":"changelog/#added_2","text":"Add manifest.in ( 155fc6e by MarkHallett). Add logging tests ( 095aadb by MarkHallett). Add functionality ( e7de569 by MarkHallett). Add test command to readme.md ( c59a742 by MarkHallett). Add tests ( 85b5991 by Mark Hallett). Add basic detail ( d769960 by MarkHallett).","title":"Added"},{"location":"code_of_conduct/","text":"Be nice! \u00a4","title":"Code of Conduct"},{"location":"code_of_conduct/#be-nice","text":"","title":"Be nice!"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd mh make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd mh make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"coverage/","text":"ToDo","title":"Coverage"},{"location":"credits/","text":"Credit to \u00a4 Many thanks to the foundations of this site. MkDocs . Material for MkDocs mkdocstrings Markdown github pypi python","title":"Credits"},{"location":"credits/#credit-to","text":"Many thanks to the foundations of this site. MkDocs . Material for MkDocs mkdocstrings Markdown github pypi python","title":"Credit to"},{"location":"development/","text":"ToDo!!","title":"Development"},{"location":"install/","text":"to install use pip install mh","title":"install"},{"location":"issues/","text":"TODO Comming soon...","title":"issues"},{"location":"license/","text":"ISC License Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"todo/","text":"TODO \u00a4 This page comming soon ...","title":"Coverage report"},{"location":"todo/#todo","text":"This page comming soon ...","title":"TODO"},{"location":"troubleshooting/","text":"todo","title":"Troubleshooting"},{"location":"usage/","text":"Basic use \u00a4 todo Use of internal libs \u00a4 todo Testing \u00a4 todo","title":"Usage"},{"location":"usage/#basic-use","text":"todo","title":"Basic use"},{"location":"usage/#use-of-internal-libs","text":"todo","title":"Use of internal libs"},{"location":"usage/#testing","text":"todo","title":"Testing"},{"location":"reference/SUMMARY/","text":"mh mh mhlib l2","title":"SUMMARY"},{"location":"reference/autorefs/plugin/","text":"window.location.href = \"https://mkdocstrings.github.io/autorefs/reference/mkdocs_autorefs/plugin/\"; Redirecting...","title":"Plugin"},{"location":"reference/autorefs/references/","text":"window.location.href = \"https://mkdocstrings.github.io/autorefs/reference/mkdocs_autorefs/references/\"; Redirecting...","title":"References"},{"location":"reference/mh/mh/","text":"Eg code to start a project with. Mh \u00a4 Bases: object An example class. run_mh () \u00a4 An example member function. Source code in mh/mh.py 21 22 23 24 def run_mh ( self ) -> int : \"\"\"An example member function.\"\"\" logger . info ( 'OK fo far' ) return 100 test_function () \u00a4 An example function that returns a string. Source code in mh/mh.py 13 14 15 def test_function () -> str : \"\"\"An example function that returns a string.\"\"\" return 'OK'","title":"mh"},{"location":"reference/mh/mh/#mh.mh.Mh","text":"Bases: object An example class.","title":"Mh"},{"location":"reference/mh/mh/#mh.mh.Mh.run_mh","text":"An example member function. Source code in mh/mh.py 21 22 23 24 def run_mh ( self ) -> int : \"\"\"An example member function.\"\"\" logger . info ( 'OK fo far' ) return 100","title":"run_mh()"},{"location":"reference/mh/mh/#mh.mh.test_function","text":"An example function that returns a string. Source code in mh/mh.py 13 14 15 def test_function () -> str : \"\"\"An example function that returns a string.\"\"\" return 'OK'","title":"test_function()"},{"location":"reference/mhlib/l2/","text":"Description for l2. l2 \u00a4 Documentation for l2.py. L2Mh \u00a4 Bases: object class L2Mh documentation run () \u00a4 Simple function Source code in mhlib/l2/l2.py 16 17 18 def run ( self ) -> int : \"\"\"Simple function\"\"\" return 10 slow () \u00a4 Example slow function. Source code in mhlib/l2/l2.py 20 21 22 23 24 def slow ( self ) -> int : \"\"\"Example slow function.\"\"\" t = 5 time . sleep ( t ) return t l2_test () \u00a4 L2 test function. Source code in mhlib/l2/l2.py 8 9 10 def l2_test () -> str : \"\"\"L2 test function.\"\"\" return 'ok2'","title":"l2"},{"location":"reference/mhlib/l2/#mhlib.l2.l2","text":"Documentation for l2.py.","title":"l2"},{"location":"reference/mhlib/l2/#mhlib.l2.l2.L2Mh","text":"Bases: object class L2Mh documentation","title":"L2Mh"},{"location":"reference/mhlib/l2/#mhlib.l2.l2.L2Mh.run","text":"Simple function Source code in mhlib/l2/l2.py 16 17 18 def run ( self ) -> int : \"\"\"Simple function\"\"\" return 10","title":"run()"},{"location":"reference/mhlib/l2/#mhlib.l2.l2.L2Mh.slow","text":"Example slow function. Source code in mhlib/l2/l2.py 20 21 22 23 24 def slow ( self ) -> int : \"\"\"Example slow function.\"\"\" t = 5 time . sleep ( t ) return t","title":"slow()"},{"location":"reference/mhlib/l2/#mhlib.l2.l2.l2_test","text":"L2 test function. Source code in mhlib/l2/l2.py 8 9 10 def l2_test () -> str : \"\"\"L2 test function.\"\"\" return 'ok2'","title":"l2_test()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage"}]}